CREATE DATABASE postgis_raster;
CREATE EXTENSION postgis_raster;

restore, oraz zmiana nazwy schematu za pomocą pgAdmin

Importowanie rastrow:

Rastry przerzucilem do katalogu postgis'a (stad brak sciezki)

raster2pgsql.exe -s 3763 -N -32767 -t 100x100 -I -C -M -d
srtm_1arc_v3.tif rasters.dem > dem.sql

raster2pgsql.exe -s 3763 -N -32767 -t 100x100 -I -C -M -d
srtm_1arc_v3.tif rasters.dem | psql -d postgis_raster -h 
localhost -U postgres -p 5432

raster2pgsql.exe -s 3763 -N -32767 -t 128x128 -I -C -M -d
Landsat8_L1TP_RGBN.TIF rasters.landsat8 | psql -d
postgis_raster -h localhost -U postgres -p 5432

Przecięcie z wektorem
CREATE TABLE cudek.intersects AS
SELECT raster.rast, vector.municipality 
FROM rasters.dem AS raster, vectors.porto_parishes AS vector
WHERE ST_Intersects(raster.rast, vector.geom) AND vector.municipality = 'PORTO';

ALTER TABLE cudek.intersects 
ADD COLUMN raster_id SERIAL PRIMARY KEY;

CREATE INDEX idx_intersects_rast_gist ON cudek.intersects 
USING gist (ST_ConvexHull(rast));

-- schema::name table_name::name raster_column::name
SELECT AddRasterConstraints('cudek'::name,
'intersects'::name,'rast'::name);

Obcinanie rastra
CREATE TABLE cudek.clip AS
SELECT ST_Clip(a.rast, b.geom, true), b.municipality
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE ST_Intersects(a.rast, b.geom) AND lower(b.municipality) like 'porto';

Łączenie kafelków
CREATE TABLE cudek.union AS
SELECT ST_Union(ST_Clip(a.rast, b.geom, true))
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE lower(b.municipality) like 'porto' and ST_Intersects(b.geom,a.rast);

ST_AsRaster
CREATE TABLE cudek.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem
LIMIT 1
)
SELECT ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE lower(a.municipality) like 'porto';

ST_Union
DROP TABLE cudek.porto_parishes; --> drop table porto_parishes first
CREATE TABLE cudek.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem
LIMIT 1
)
SELECT st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767)) AS rast
FROM vectors.porto_parishes AS a, r
WHERE lower(a.municipality) like 'porto';

ST_Tile
DROP TABLE cudek.porto_parishes; --> drop table porto_parishes first
CREATE TABLE cudek.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem
LIMIT 1 )
SELECT st_tile(st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-
32767)),128,128,true,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE lower(a.municipality) like 'porto';


ST_Intersection
create table cudek.intersection as
SELECT
a.rid,(ST_Intersection(b.geom,a.rast)).geom,(ST_Intersection(b.geom,a.rast)
).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE lower(b.parish) like 'paranhos' and ST_Intersects(b.geom,a.rast);

ST_DumpAsPolygons
CREATE TABLE cudek.dumppolygons AS
SELECT
a.rid,(ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).geom,(ST_DumpAsPolygons(S
T_Clip(a.rast,b.geom))).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE lower(b.parish) like 'paranhos' and ST_Intersects(b.geom,a.rast);

St_Band
CREATE TABLE cudek.landsat_nir AS
SELECT rid, ST_Band(rast,4) AS rast
FROM rasters.landsat8;

ST_Clip
CREATE TABLE cudek.paranhos_dem AS
SELECT a.rid,ST_Clip(a.rast, b.geom,true) as rast
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE lower(b.parish) like 'paranhos' and ST_Intersects(b.geom,a.rast);

ST_Slope
CREATE TABLE cudek.paranhos_slope AS
SELECT a.rid,ST_Slope(a.rast,1,'32BF','PERCENTAGE') as rast
FROM schema_name.paranhos_dem AS a;

ST_Reclass
CREATE TABLE cudek.paranhos_slope_reclass AS
SELECT a.rid,ST_Reclass(a.rast,1,']0-15]:1, (15-30]:2, (30-9999:3',
'32BF',0)
FROM schema_name.paranhos_slope AS a;

ST_SummaryStats
SELECT st_summarystats(a.rast) AS stats
FROM cudek.paranhos_dem AS a;

ST_SummaryStats & Union
SELECT st_summarystats(ST_Union(a.rast))
FROM cudek.paranhos_dem AS a;

ST_SummaryStats
WITH t AS (
SELECT st_summarystats(ST_Union(a.rast)) AS stats
FROM cudek.paranhos_dem AS a
)
SELECT (stats).min,(stats).max,(stats).mean FROM t;


ST_SummaryStats & GROUP BY
WITH t AS (
SELECT b.parish AS parish, st_summarystats(ST_Union(ST_Clip(a.rast,
b.geom,true))) AS stats
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE lower(b.municipality) like 'porto' and
ST_Intersects(b.geom,a.rast)
group by b.parish
)
SELECT parish,(stats).min,(stats).max,(stats).mean FROM t;

ST_Value
SELECT b.name,st_value(a.rast,(ST_Dump(b.geom)).geom)
FROM
rasters.dem a, vectors.places AS b
WHERE ST_Intersects(a.rast,b.geom)
ORDER BY b.name;

ST_TPI
create table cudek.tpi30 as
select ST_TPI(a.rast,1) as rast
from rasters.dem a;

Indeks przestrzenny
CREATE INDEX idx_tpi30_rast_gist ON cudek.tpi30
USING gist (ST_ConvexHull(rast));

Dodawanie constraintow
SELECT AddRasterConstraints('cudek'::name,
'tpi30'::name,'rast'::name);

Dla Porto

CREATE TABLE cudek.tpi30Porto AS
SELECT ST_TPI(raster.rast, 1)
FROM rasters.dem AS raster, vectors.porto_parishes AS vector
WHERE ST_Intersects(raster.rast, vector.geom) AND vector.municipality = 'PORTO';

CREATE INDEX idx_tpi30porto_rast_gist ON cudek.tpi30Porto
USING gist (ST_ConvexHull(st_tpi));

SELECT AddRasterConstraints('cudek'::name, 'tpi30porto'::name,'st_tpi'::name);

Wyrażenie Algebry Map
CREATE TABLE cudek.porto_ndvi AS
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE lower(b.municipality) like 'porto' and
ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, 1,
r.rast, 4,
'([rast2.val] - [rast1.val]) / ([rast2.val] +
[rast1.val])::float','32BF'
) AS rast
FROM r;

Indeks przestrzenny
CREATE INDEX idx_porto_ndvi_rast_gist ON cudek.porto_ndvi
USING gist (ST_ConvexHull(rast));

Dodanie constraintów
SELECT AddRasterConstraints('cudek'::name,
'porto_ndvi'::name,'rast'::name);

Funkcja zwrotna
create or replace function cudek.ndvi(
value double precision [] [] [],
pos integer [][],
VARIADIC userargs text []
)
RETURNS double precision AS
$$
BEGIN
--RAISE NOTICE 'Pixel Value: %', value [1][1][1];-->For debug purposes
RETURN (value [2][1][1] - value [1][1][1])/(value [2][1][1]+value
[1][1][1]); --> NDVI calculation!
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE COST 1000;

Wywołanie funkcji
CREATE TABLE cudek.porto_ndvi2 AS
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE lower(b.municipality) like 'porto' and
ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, ARRAY[1,4],
'cudek.ndvi(double precision[],
integer[],text[])'::regprocedure, --> This is the function!
'32BF'::text
) AS rast
FROM r;

Dodanie indeksu przestrzennego
CREATE INDEX idx_porto_ndvi2_rast_gist ON cudek.porto_ndvi2
USING gist (ST_ConvexHull(rast));

Dodanie constraintów
SELECT AddRasterConstraints('cudek'::name,
'porto_ndvi2'::name,'rast'::name);

Eksport danych - ST_AsTiff
SELECT ST_AsTiff(ST_Union(rast))
FROM cudek.porto_ndvi;

ST_AsGDALRaster
SELECT ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE',
'PREDICTOR=2', 'PZLEVEL=9'])
FROM cudek.porto_ndvi;

-- eksport na dysk
CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
 ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE',
'PREDICTOR=2', 'PZLEVEL=9'])
 ) AS loid
FROM cudek.porto_ndvi;
----------------------------------------------
SELECT lo_export(loid, 'C:\Users\cudek\Desktop\BazyDanych\myraster.tiff')
 FROM tmp_out;
----------------------------------------------
SELECT lo_unlink(loid)
 FROM tmp_out; --> Delete the large object.
